/*
 * Copyright 2009, Google Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 *     * Redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above
 * copyright notice, this list of conditions and the following disclaimer
 * in the documentation and/or other materials provided with the
 * distribution.
 *     * Neither the name of Google Inc. nor the names of its
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/* This file provides API functions to connect arm_categorize.c
 * and arm_compress.cc so that when the --compress option is
 * specified, the ARM instruction trie can be built and compressed
 * simultaneously. Note that this header file defines the API
 * in terms of C, so that we can include it in arm_categorize.c
 */

#ifndef NATIVE_CLIENT_PRIVATE_TOOLS_NCV_ARM_ARM_CAT_COMPRESS_H__
#define NATIVE_CLIENT_PRIVATE_TOOLS_NCV_ARM_ARM_CAT_COMPRESS_H__

#include "native_client/src/trusted/validator_arm/arm_categorize.h"

EXTERN_C_BEGIN

/*
 * Creates an instance of ArmTrieMergeSet;
 */
struct ArmTrieMergeSet* CreateArmTrieMergeSet();

/*
 * Destroys a previously created instance generated by
 * CreateArmTrieMergeSet();
 */
void DestroyArmTrieMergeSet(struct ArmTrieMergeSet* merge_set);

/*
 * Compress the given instruction node, updating the number of leaves (and
 * hence, the number of instruction patterns matched). Returns the compressed
 * node (null if this subtrie doesn't contains any possible leaf instruction
 * matches).
 *
 * *WARNING* This method should only be called inside of
 * BuildCompressedArmInstructionTrie, since it counts on
 */
ArmInstructionTrie* CompressNode(ArmInstructionTrieData* data,
                                 ArmInstructionTrie* node,
                                 Bool apply_recursively,
                                 size_t* number_leaves_visited);

/*
 * Generate integers (in the order this function is called, starting
 * at 1), for each node pointer. Used in debugging messages to generate
 * repeatable values for trie node pointers.
 */
int GetTrieNodeId(const ArmInstructionTrie* node);

EXTERN_C_END

#endif  /* NATIVE_CLIENT_PRIVATE_TOOLS_NCV_ARM_ARM_CAT_COMPRESS_H__ */
