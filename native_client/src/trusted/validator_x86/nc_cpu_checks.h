/*
 * Copyright 2009, Google Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 *     * Redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above
 * copyright notice, this list of conditions and the following disclaimer
 * in the documentation and/or other materials provided with the
 * distribution.
 *     * Neither the name of Google Inc. nor the names of its
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * Checks that CPU ID features match instructions found in executable.
 *
 * Note: The following functions are used to define a validator function
 * for collecting this information. See header file ncvalidator_iter.h
 * for more information on how to register these functions as a validator
 * function.
 */

#ifndef NATIVE_CLIENT_SRC_TRUSTED_VALIDATOR_X86_NC_CPU_CHECKS_H__
#define NATIVE_CLIENT_SRC_TRUSTED_VALIDATOR_X86_NC_CPU_CHECKS_H__

#include <stdio.h>

/* Defines a validator state. */
struct NcValidatorState;

/* Defines an instruction iterator that processes a code segment. */
struct NcInstIter;

/* Defines the set of cpu feature checks applied to the code. */
struct NcCpuCheckState;

/* Creates a CPU feature struct (all fields initialized to false), to be used
 * to record what features need to be squashed out of the executable.
 */
struct NcCpuCheckState* NcCpuCheckMemoryCreate(
    struct NcValidatorState* state);

/* Destroys the CPU feature list generated by NcCpuCheckMemoryCreate. */
void NcCpuCheckMemoryDestroy(struct NcValidatorState* state,
                             struct NcCpuCheckState* checked_features);

/* Check that cpu features match instructions for native client rules. */
void NcCpuCheck(struct NcValidatorState* state,
                struct NcInstIter* iter,
                struct NcCpuCheckState* checked_features);

/* Apply (non-instuction) summary checks for cpu features. */
void NcCpuCheckSummary(FILE* file,
                       struct NcValidatorState* state,
                       struct NcCpuCheckState* checked_features);

#endif  /* NATIVE_CLIENT_SRC_TRUSTED_VALIDATOR_X86_NC_CPU_CHECKS_H__ */
