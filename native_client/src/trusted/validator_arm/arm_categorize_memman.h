/*
 * Copyright 2009, Google Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 *     * Redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above
 * copyright notice, this list of conditions and the following disclaimer
 * in the documentation and/or other materials provided with the
 * distribution.
 *     * Neither the name of Google Inc. nor the names of its
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * Define a memory manager for handling memory on ARM instruction tries.
 * This API is defined so that we can swap in different memory strategies
 * to deal with the large amount of memory generated by this API.
 */

#ifndef NATIVE_CLIENT_PRIVATE_TOOLS_NCV_ARM_ARM_CATEGORIZE_MEMMAN_H__
#define NATIVE_CLIENT_PRIVATE_TOOLS_NCV_ARM_ARM_CATEGORIZE_MEMMAN_H__

#include "native_client/src/trusted/validator_arm/arm_categorize.h"

EXTERN_C_BEGIN

/*
 * Alcloate an instance of an ArmInstructionList;
 */
ArmInstructionList* MallocArmInstructionListNode();

/*
 * Free an instance of an ArmInstructionList allocated using
 * MallocArmInstructionList.
 */
void FreeArmInstructionListNode(ArmInstructionList* node);

/*
 * Delete all instruction list nodes in the given list.
 */
void FreeArmInstructionList(ArmInstructionList* list);

/*
 * Allocate an instance of an ArmInstructionTrie.
 */
ArmInstructionTrie* MallocArmInstructionTrie();

/*
 * Free an instance of an ArmInstructionTrie allocated using
 * MallocArmInstructionTrie.
 */
void FreeArmInstructionTrie(ArmInstructionTrie* node);

EXTERN_C_END

#endif  /* NATIVE_CLIENT_PRIVATE_TOOLS_NCV_ARM_ARM_CATEGORIZE_MEMMAN_H__ */
